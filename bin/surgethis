#!/bin/bash
set -euo pipefail

SALT="mysalt123"
DIST="./dist-share-note"
HEADER_FILE="/home/marienvanoverbeek/Notes/Scripts/assets/header.html"

rm -rf "$DIST"
mkdir -p "$DIST/assets"

if [ $# -lt 1 ]; then
  echo "Usage: $0 entry.md"
  exit 1
fi
ENTRY="$1"
[ -f "$ENTRY" ] || { echo "Error: file not found: $ENTRY"; exit 1; }

# ---------- helpers (US English comments) ----------
slug () {
  echo "$1" \
    | tr '[:upper:]' '[:lower:]' \
    | sed 's/[ _]/-/g' \
    | sed 's/[^a-z0-9-]/-/g' \
    | sed 's/--*/-/g' \
    | sed 's/^-//' | sed 's/-$//'
}
safe_asset () {
  echo "$1" \
    | tr '[:upper:]' '[:lower:]' \
    | sed 's/[ _]/-/g' \
    | sed 's/[^a-z0-9.-]/-/g' \
    | sed 's/--*/-/g'
}
note_basename () { basename "$1" .md; }
escape_sed () { printf '%s' "$1" | sed -e 's/[.[\*^$()+?{}|/\\]/\\&/g'; }

build_html () {
  local src_md="$1" out_html="$2" respath="$3"
  local include_args=()
  [ -f "$HEADER_FILE" ] && include_args=(--include-in-header "$HEADER_FILE")
  pandoc \
    --from=gfm+emoji+wikilinks_title_after_pipe+hard_line_breaks \
    --to=html5 \
    --standalone \
    --embed-resources \
    --metadata=pagetitle:"$(note_basename "$src_md")" \
    --resource-path="$respath" \
    "${include_args[@]}" \
    --output="$out_html" \
    "$src_md"
}
# ---------------------------------------------------

mkdir -p "$DIST/assets"
VAULT="$(pwd)"
TMPROOT="$(mktemp -d)"

entry_name="$(note_basename "$ENTRY")"
entry_slug="$(slug "$entry_name")"
domain_hash="$(echo "$SALT:$entry_slug" | sha1sum | cut -c1-6)"
DOMAIN="${entry_slug}-${domain_hash}.marienvanoverbeek.nl"
DOMAIN="${entry_slug}.marienvanoverbeek.nl"

declare -A VISITED=()
QUEUE=("$entry_name")

while [ ${#QUEUE[@]} -gt 0 ]; do
  current="${QUEUE[0]}"; QUEUE=("${QUEUE[@]:1}")
  [ -n "${VISITED[$current]+x}" ] && continue
  VISITED["$current"]=1

  src_md_path="./${current}.md"
  [ -f "$src_md_path" ] || continue

  TMPDIR="$(mktemp -d -p "$TMPROOT")"
  WORK_MD="${TMPDIR}/work.md"
  cp "$src_md_path" "$WORK_MD"

  # --- Images: ![[...]] ---
  # Extract and ignore empties
  mapfile -t IMG_EMBEDS < <(grep -oP '!\[\[\K[^\]]+(?=\]\])' "$src_md_path" 2>/dev/null \
                            | sed '/^\s*$/d' | sort -u || true)
  for target in "${IMG_EMBEDS[@]:-}"; do
    [ -n "$target" ] || continue
    FOUND="$(find "$VAULT" -type f -name "$target" -print -quit 2>/dev/null || true)"
    safe="$(safe_asset "$target")"
    if [ -n "$FOUND" ]; then
      cp "$FOUND" "$DIST/assets/$safe"
      esc_target="$(escape_sed "$target")"
      sed -i "s|!\[\[$esc_target\]\]|![](assets/$safe)|g" "$WORK_MD"
    else
      esc_target="$(escape_sed "$target")"
      sed -i "s|!\[\[$esc_target\]\]|![]($safe)|g" "$WORK_MD"
      echo "Warning: missing asset '$target' for note '$current'" >&2
    fi
  done

  # --- Wiki links (non-image): [[Note|Alias]] / [[Note#Heading|Alias]] ---
  mapfile -t WIKIS < <(grep -oP '(?<!\!)\[\[[^\]]+\]\]' "$src_md_path" 2>/dev/null \
                       | sed '/^\s*$/d' | sort -u || true)
  for raw in "${WIKIS[@]:-}"; do
    [ -n "$raw" ] || continue
    inner="${raw:2:${#raw}-4}"             # strip [[ ]]
    [ -n "$inner" ] || continue

    base_and_frag="${inner%%|*}"
    alias="${inner#*|}"; [ "$alias" = "$inner" ] && alias="$base_and_frag"

    base="${base_and_frag%%#*}"
    frag="${base_and_frag#*#}"; [ "$frag" = "$base_and_frag" ] && frag=""

    # trim whitespace
    base="$(echo "$base" | sed 's/^ *//; s/ *$//')"
    alias="$(echo "$alias" | sed 's/^ *//; s/ *$//')"
    frag="$(echo "$frag" | sed 's/^ *//; s/ *$//')"

    [ -n "$base" ] || continue

    target_md="./${base}.md"
    base_slug="$(slug "$base")"
    href=""
    if [ -f "$target_md" ]; then
      if [ "$base" = "$entry_name" ]; then
        # Link back to entry page (index). Keep fragment if present.
        href="./"                     # of "/" als je absolute root wilt
        [ -n "$frag" ] && href="${href}#$(slug "$frag")"
        # Do NOT enqueue the entry again
      else
        # Normal page: enqueue and link to its own html
        if [ -z "${VISITED[$base]+x}" ]; then
          QUEUE+=("$base")
        fi
        href="${base_slug}.html"
        [ -n "$frag" ] && href="${href}#$(slug "$frag")"
      fi
    else
      href="#404-${base_slug}"
    fi

    esc_raw="$(escape_sed "$raw")"
    repl="[$alias]($href)"
    sed -i "s|$esc_raw|$repl|g" "$WORK_MD"
  done

  # --- Build HTML (entry → index.html, others → <slug>.html) ---
  page_slug="$(slug "$current")"
  if [ "$current" = "$entry_name" ]; then
    out_html="$DIST/index.html"
  else
    out_html="$DIST/${page_slug}.html"
  fi

  build_html "$WORK_MD" "$out_html" "$DIST:$VAULT:$TMPDIR"
done

echo "Files to be uploaded to https://${DOMAIN}:"
echo ""
(
  cd "$DIST"
  # Print each filename in blue
  find . -type f -printf '%P\n' | sort | while read -r f; do
    printf '\033[34m%s\033[0m\n' "$f"
  done
)
echo ""
read -r -p "Is this ok [y/N]: " confirm
if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
  echo "Cancelled."
  exit 1
fi

# Publish
surge "$DIST" "$DOMAIN"
echo "Published: https://${DOMAIN}"

