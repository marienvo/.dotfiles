#!/bin/bash
# To run every hour, add this to crontab -e:
# 0 * * * * ~/.dotfiles/bin/due

# Set the DISPLAY variable
export DISPLAY=:1

# Ensure the script has access to the DBus session for desktop notifications
# This might need adjustment based on your system setup
export DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u)/bus"

# Archive done items silently
todo.sh archive >/dev/null 2>&1

# Ensure Habit for tomorrow is set
TODO_PATH="$HOME/Notes/todo.txt"
HABIT="Read, walk or train 10 minutes rec:1d"

# Read the last line of the file
last_line=$(tail -n 1 "$TODO_PATH")

# Check if the last line is empty
if [[ -n $last_line ]]; then
    # If the last line is not empty, add an empty line to the file
    echo "" >> "$TODO_PATH"
fi

# Get tomorrow's date in YYYY-MM-DD format and convert it to a timestamp
tomorrow=$(date -d tomorrow "+%Y-%m-%d")
tomorrowStamp=$(date -d "$tomorrow" +%s)

# Use awk to extract due dates from the file, find the earliest one
earliestDue=$(grep "$HABIT due:" "$TODO_PATH" | sed -E "s/.*$HABIT due:([0-9]{4}-[0-9]{2}-[0-9]{2}).*/\1/" | sort | head -n 1)

# Proceed only if we found at least one due date
if [ -z "$earliestDue" ]; then
    echo "$HABIT due:$tomorrow" >> "$TODO_PATH"
elif [[ ! -z "$earliestDue" ]]; then
    # Convert the earliest due date to a timestamp
    earliestDueStamp=$(date -d "$earliestDue" +%s)

    # Append a line with tomorrow's date to the file if the earliest due date is beyond tomorrow
    [ $earliestDueStamp -gt $tomorrowStamp ] && echo "$HABIT due:$tomorrow" >> "$TODO_PATH"
fi

# Check if the todo.txt file exists
if [ ! -f "$TODO_PATH" ]; then
    echo "File $TODO_PATH does not exist."
    exit 1
fi

# Get today's date as a Unix timestamp at 00:00:00
TODAY=$(date '+%s' -d "$(date '+%Y-%m-%d')")

# Read through each line in todo.txt
while IFS= read -r line; do
    # Skip empty lines
    if [[ -z "$line" ]]; then
        continue
    fi

    # Extract the due date from each task
    DUE_DATE=$(echo "$line" | grep -oP 'due:\K[0-9-]+')

    # Convert the due date to Unix timestamp at 00:00:00
    DUE_DATE_TS=$(date '+%s' -d "$DUE_DATE")

    # Check if the task was due today or before today
    if [ "$DUE_DATE_TS" -le "$TODAY" ]; then
        # Extract the title of the task
        TITLE=$(echo "$line" | sed -E 's/.*([0-9]{4}-[0-9]{2}-[0-9]{2}) //g' | sed -E 's/ rec:.*//')
        safe_line=$(printf '%s\n' "$line" | sed 's:[][\/.^$*]:\\&:g')

        if zenity --question --icon=view-refresh --no-wrap --title="Did you complete this task?" --text="$TITLE"; then
            # Mark done when clicking "Yes":
            echo -e "Marking as done: \n$safe_line"
            sed -i "/^$safe_line$/s/^/x /" "$TODO_PATH"
        else
            # Mute the task when clicking "No":
            echo -e "Ignoring task: \n$safe_line"
            notify-send -u normal --icon=media-playback-pause "$TITLE" "Task still pending"
            # All icons: https://specifications.freedesktop.org/icon-naming-spec/latest/ar01s04.html
        fi
    fi
done < "$TODO_PATH"